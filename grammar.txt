statement   : NEWLINE* expr (NEWLINE+ expr)* NEWLINE

expr        : KEYWORD:VAR IDENTIFIER EQ expr
            : comp-expr ((KEYWORD:AND|KEYWORD:OR) compr-expr)*

comp-expr   : NOT comp-expr
            : arith-expr ((EE|NE|LT|GT|LTE|GTE) arith-expr)*

arith-expr  : term ((PLUS|MINUS) term)*

term        : factor ((MUL|DIV|QUO|MOD) factor)*

factor      : (PLUS|MINUS) factor
            : power

power       : call (POW factor)*

call        : atom (LPAREN (expr (COMMA expr)*)? RPAREN)?

atom        : INT|FLOAT|STRING|IDENTIFIER
            : LPAREN expr RPAREN
            : if-expr
            : for-expr
            : while-expr
            : list-expr
            : func-def

list-expr   : LSBRACKET (expr (COMMA expr)*)? RSBRACKET

if-expr     : KEYWORD:if expr LCBRACKET
            : (expr if-expr-b | if-expr-c?)
            | (NEWLINE statements RCBRACKET if-expr-b | if-expr-c)

if-expr-b   : KEYWORD:elif expr LCBRACKET
            : (expr if-expr-b | if-expr-c?)
            | (NEWLINE statements RCBRACKET if-expr-b | if-expr-c)

if-expr     : KEYWORD:if expr LCBRACKET
              expr
            | (NEWLINE statements RCBRACKET)

for-expr    : KEYWORD:for IDENTIFIER EQ expr KEYWORD:to expr 
            : (KEYWORD:step expr)? LCBRACKET
            : expr
            | (NEWLINE statements RCBRACKET)

while-expr  : KEYWORD:while expr LCBRACKET
            : expr
            | (NEWLINE statements RCBRACKET)

func-def    : KEYWORD:func IDENTIFIER? LPAREN (IDENTIFIER (COMMA IDENTIFIER)*)? RPAREN
            : (EQ expr)
            | (LCBRACKET NEWLINE statements RCBRACKET)